// Generated by view binder compiler. Do not edit!
package com.example.dashboardscreen.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.dashboardscreen.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemExpenseBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView amountText;

  @NonNull
  public final TextView expenseNameText;

  @NonNull
  public final ConstraintLayout itemRootView;

  @NonNull
  public final TextView owesText;

  private ItemExpenseBinding(@NonNull ConstraintLayout rootView, @NonNull TextView amountText,
      @NonNull TextView expenseNameText, @NonNull ConstraintLayout itemRootView,
      @NonNull TextView owesText) {
    this.rootView = rootView;
    this.amountText = amountText;
    this.expenseNameText = expenseNameText;
    this.itemRootView = itemRootView;
    this.owesText = owesText;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemExpenseBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemExpenseBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_expense, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemExpenseBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.amountText;
      TextView amountText = ViewBindings.findChildViewById(rootView, id);
      if (amountText == null) {
        break missingId;
      }

      id = R.id.expenseNameText;
      TextView expenseNameText = ViewBindings.findChildViewById(rootView, id);
      if (expenseNameText == null) {
        break missingId;
      }

      ConstraintLayout itemRootView = (ConstraintLayout) rootView;

      id = R.id.owesText;
      TextView owesText = ViewBindings.findChildViewById(rootView, id);
      if (owesText == null) {
        break missingId;
      }

      return new ItemExpenseBinding((ConstraintLayout) rootView, amountText, expenseNameText,
          itemRootView, owesText);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
